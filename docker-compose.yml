version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - PORT=${PORT}
      - API_VERSION=${API_VERSION}
      - API_KEY=${API_KEY}
      - API_URL=${API_URL}
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL}
      - DEFAULT_LLM_TEMPERATURE=${DEFAULT_LLM_TEMPERATURE}
      - DEFAULT_LLM_MESSAGE_TOKENS=${DEFAULT_LLM_MESSAGE_TOKENS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - AGENTS_TABLE_NAME=${AGENTS_TABLE_NAME}
      - SIMULATIONS_TABLE_NAME=${SIMULATIONS_TABLE_NAME}
      - CONVERSATIONS_TABLE_NAME=${CONVERSATIONS_TABLE_NAME}
      - DISCUSSIONS_TABLE_NAME=${DISCUSSIONS_TABLE_NAME}
      - MESSAGES_TABLE_NAME=${MESSAGES_TABLE_NAME}
      - BFI_TABLE_NAME=${BFI_TABLE_NAME}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

volumes:
  redis_data:
