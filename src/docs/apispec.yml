openapi: 3.0.0
info:
  title: Simulation API
  description: API for create and monitor Agent Based Simulations @ GÃ¶teborgsregionen
  version: 1.0.0
servers:
  - url: https://api.innovationsarenan.dev/sim
    description: Main production server
security:
  - ApiKeyAuth: []
paths:
  /agent/{agentId}:
    get:
      summary: Get an agent
      description: Retrieves a specific agent by its ID
      operationId: getAgent
      parameters:
        - name: agentId
          in: path
          required: true
          description: ID of the agent to retrieve
          schema:
            type: string
            example: "uC3BVPe3"
      responses:
        "200":
          description: Agent retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "404":
          description: Agent not found
        "500":
          description: Server error

  /agents:
    post:
      summary: Create agents
      description: Creates one or more agents from BigFive data
      operationId: createAgents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - count
                - version
                - simulationId
              properties:
                count:
                  type: integer
                  description: Number of agents to create
                  example: 3
                version:
                  type: integer
                  description: Agent version
                  example: 2
                simulationId:
                  type: string
                  description: Simulation ID to associate with the agents
                  example: iLVieMGDrI6GTBLq
      responses:
        "201":
          description: Agents created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /agents/custom:
    post:
      summary: Create a custom agent
      description: Creates a custom agent with specified parameters
      operationId: createCustomAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomAgentInput"
      responses:
        "201":
          description: Custom agent created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /agents/random:
    post:
      summary: Create random agents
      description: Creates one or more agents by randomly generating personality values
      operationId: createRandomAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - count
                - version
                - simulationId
              properties:
                count:
                  type: integer
                  description: Number of agents to create
                  example: 3
                version:
                  type: integer
                  description: Agent version
                  example: 3
                simulationId:
                  type: string
                  description: Simulation ID to associate with the agents
                  example: iLVieMGDrI6GTBLq
      responses:
        "201":
          description: Random agents created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /agent/{agentId}/evaluate:
    post:
      summary: Evaluate an agent
      description: Evaluates an agent's personality traits or questionnaire responses
      operationId: evaluateAgent
      parameters:
        - name: agentId
          in: path
          required: true
          description: ID of the agent to evaluate
          schema:
            type: string
            example: "uC3BVPe3"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluationInput"
      responses:
        "200":
          description: Agent evaluation completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        "400":
          description: Invalid input
        "404":
          description: Agent not found
        "500":
          description: Server error

  /simulations:
    post:
      summary: Create a new simulation
      description: Creates a new simulation with the specified parameters
      operationId: createSimulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulationInput"
      responses:
        "201":
          description: Simulation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Simulation"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /simulations/{simulationId}:
    get:
      summary: Get a simulation
      description: Retrieves a specific simulation by its ID
      operationId: getSimulation
      parameters:
        - name: simulationId
          in: path
          required: true
          description: ID of the simulation to retrieve
          schema:
            type: string
            example: "iLVieMGDrI6GTBLq"
      responses:
        "200":
          description: Simulation retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Simulation"
        "404":
          description: Simulation not found
        "500":
          description: Server error

  /simulations/{simulationId}/start:
    patch:
      summary: Start a simulation
      description: Changes the state of a simulation from 'primed' to 'running' and initiates conversations between agents
      operationId: startSimulation
      parameters:
        - name: simulationId
          in: path
          required: true
          description: ID of the simulation to start
          schema:
            type: string
            example: "iLVieMGDrI6GTBLq"
      responses:
        "200":
          description: Simulation started successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Simulation"
        "400":
          description: Missing simulation ID or invalid input
        "404":
          description: Simulation not found
        "500":
          description: Server error

  /simulations/{simulationId}/stop:
    patch:
      summary: Stop a simulation
      description: Changes the state of a simulation from 'running' to 'stopped'
      operationId: stopSimulation
      parameters:
        - name: simulationId
          in: path
          required: true
          description: ID of the simulation to stop
          schema:
            type: string
            example: "iLVieMGDrI6GTBLq"
      responses:
        "200":
          description: Simulation stopped successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Simulation"
        "400":
          description: Missing simulation ID or invalid input
        "404":
          description: Simulation not found
        "500":
          description: Server error

  /simulations/{simulationId}/messages:
    get:
      summary: List simulation messages
      description: Retrieves all messages from a simulation
      operationId: listSimulationMessages
      parameters:
        - name: simulationId
          in: path
          required: true
          description: ID of the simulation
          schema:
            type: string
            example: "iLVieMGDrI6GTBLq"
      responses:
        "200":
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "404":
          description: Simulation not found
        "500":
          description: Server error

  /simulations/{simulationId}/agents:
    get:
      summary: List simulation agents
      description: Retrieves all agents from a simulation
      operationId: listSimulationAgents
      parameters:
        - name: simulationId
          in: path
          required: true
          description: ID of the simulation
          schema:
            type: string
            example: "iLVieMGDrI6GTBLq"
      responses:
        "200":
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agent"
        "404":
          description: Simulation not found
        "500":
          description: Server error

  /simulations/{simulationId}/interactions:
    get:
      summary: List simulation interactions
      description: Retrieves all interactions from a simulation
      operationId: listSimulationInteractions
      parameters:
        - name: simulationId
          in: path
          required: true
          description: ID of the simulation
          schema:
            type: string
            example: "iLVieMGDrI6GTBLq"
      responses:
        "200":
          description: Interactions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Interaction"
        "404":
          description: Simulation not found
        "500":
          description: Server error

  /interactions:
    post:
      summary: Create a new interaction
      description: Creates a new interaction (conversation, discussion, or survey) between agents in a simulation
      operationId: createInteraction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InteractionInput"
      responses:
        "201":
          description: Interaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Interaction"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /interactions/{interactionId}:
    get:
      summary: Get an interaction
      description: Retrieves a specific interaction by its ID
      operationId: getInteraction
      parameters:
        - name: interactionId
          in: path
          required: true
          description: ID of the interaction to retrieve
          schema:
            type: string
            example: "int123456"
      responses:
        "200":
          description: Interaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Interaction"
        "404":
          description: Interaction not found
        "500":
          description: Server error

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorization
      description: API key authentication using Bearer token
  schemas:
    Agent:
      type: object
      required:
        - id
        - version
        - name
        - simulationId
        - type
        - state
        - inInteractionId
        - personality
        - objectives
        - llmSettings
      properties:
        id:
          type: string
          example: uC3BVPe3
        version:
          type: integer
          description: Agent version
          example: 2
        name:
          type: string
          description: Random Swedish name based on sex
          example: Kim Svensson
        simulationId:
          type: string
          description: ID of the simulation this agent belongs to
          example: iLVieMGDrI6GTBLq
        type:
          type: string
          enum: [custom, random, data]
          description: Type of agent creation method
          example: random
        state:
          type: string
          enum: [idle, active]
          example: idle
        inInteractionId:
          type: string
          nullable: true
          description: ID of the interaction the agent is currently participating in
          example: null
        demographics:
          $ref: "#/components/schemas/Demographics"
        organization:
          $ref: "#/components/schemas/Organization"
        personality:
          $ref: "#/components/schemas/BigFivePersonalityModel"
        objectives:
          type: array
          description: "[Agent Name/Type] aims to [verb] [target/resource] to achieve [desired state/outcome]"
          items:
            type: string
            example: Protect your interests
        dynamicProps:
          type: array
          items:
            type: object
            additionalProperties: true
        llmSettings:
          $ref: "#/components/schemas/LLMSettings"
        evaluations:
          $ref: "#/components/schemas/Evaluations"
        stats:
          $ref: "#/components/schemas/TokenStats"

    CustomAgentInput:
      type: object
      required:
        - id
        - version
        - name
        - simulationId
        - type
        - personality
        - objectives
        - llmSettings
      properties:
        id:
          type: string
          example: uC3BVPe3
        version:
          type: integer
          description: Agent version
          example: 2
        name:
          type: string
          description: Agent name
          example: Kim Svensson
        simulationId:
          type: string
          description: ID of the simulation this agent belongs to
          example: iLVieMGDrI6GTBLq
        type:
          type: string
          enum: [custom, random, data]
          description: Type of agent creation method
          example: custom
        demographics:
          $ref: "#/components/schemas/Demographics"
        organization:
          $ref: "#/components/schemas/Organization"
        personality:
          $ref: "#/components/schemas/BigFivePersonalityModel"
        objectives:
          type: array
          items:
            type: string
        dynamicProps:
          type: array
          items:
            type: object
            additionalProperties: true
        llmSettings:
          $ref: "#/components/schemas/LLMSettings"

    Demographics:
      type: object
      required:
        - age
        - sex
      properties:
        age:
          type: integer
          example: 32
        sex:
          type: string
          enum: [male, female]
          example: male
        educationLevel:
          type: integer
          description: Education level according to SeQF framework
          example: 6

    Organization:
      type: object
      properties:
        role:
          type: string
          description: Role name
          example: Manager
        roleDescription:
          type: string
          description: Role description
          example: Team leader responsible for project coordination
        hierarchyWeight:
          type: number
          description: Higher values indicate more importance in the hierarchy
          example: 8
        subGroups:
          type: array
          description: Departments or subgroups the agent belongs to
          items:
            type: string
            example: Engineering

    LLMSettings:
      type: object
      required:
        - provider
        - model
        - temperature
        - messageToken
      properties:
        provider:
          type: string
          description: LLM provider
          example: openai
        model:
          type: string
          description: LLM model
          example: "gpt-4o-mini"
        temperature:
          type: number
          description: LLM teperature. Dynamically set based on personality?
          example: 0.5
        messageToken:
          type: integer
          description: Long or short messages
          example: 300
    TokenStats:
      type: object
      required:
        - promptTokens
        - completionTokens
      properties:
        promptTokens:
          type: integer
          example: 234
        completionTokens:
          type: integer
          example: 544

    Evaluations:
      type: object
      required:
        - bigFive
      properties:
        bigFive:
          $ref: "#/components/schemas/BigFiveEvaluation"
        questionnaire:
          $ref: "#/components/schemas/QuestionnaireEvaluation"

    BigFiveEvaluation:
      type: object
      required:
        - samples
        - results
      properties:
        samples:
          type: integer
          description: Number of evaluation samples
          example: 100
        results:
          type: object
          required:
            - min
            - max
            - avg
          properties:
            min:
              type: number
              description: Minimum percentage score
              example: 78.5
            max:
              type: number
              description: Maximum percentage score
              example: 95.2
            avg:
              type: number
              description: Average percentage score
              example: 86.8

    QuestionnaireEvaluation:
      type: object
      required:
        - version
        - results
      properties:
        version:
          type: integer
          description: Questionnaire version
          example: 1
        results:
          type: object
          required:
            - avg
          properties:
            avg:
              type: number
              description: Average percentage score
              example: 82.3

    EvaluationInput:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [bigfive, questionnaire]
          description: Type of evaluation to perform
          example: bigfive
        samples:
          type: integer
          description: Number of samples for BigFive evaluation (optional)
          example: 50

    Facet:
      type: object
      required:
        - code
        - value
      properties:
        code:
          type: string
        value:
          oneOf:
            - type: string
            - type: number

    BigFivePersonalityModel:
      type: object
      required:
        - source
        - traits
      properties:
        source:
          type: string
          description: Source of data.
          example: ESS
        traits:
          type: object
          description: Big five personality traits
          required:
            - openness
            - conscientiousness
            - extraversion
            - agreeableness
            - neuroticism
          properties:
            openness:
              type: number
              description: Curiosity, imagination, appreciation for art and beauty, emotional depth, and willingness to try new experiences and entertain unconventional ideas.
              minimum: 1
              maximum: 10
              example: 9
            conscientiousness:
              type: number
              description: Reflects a tendency toward organization, responsibility, reliability, and goal-directed behavior.
              minimum: 1
              maximum: 10
              example: 7
            extraversion:
              type: number
              description: Reflects a tendency toward sociability, assertiveness, talkativeness, and the seeking of stimulation and energy from interactions with others.
              minimum: 1
              maximum: 10
              example: 6
            agreeableness:
              type: number
              description: Reflects a tendency toward cooperation, compassion, politeness, and concern for maintaining social harmony and positive relationships with others.
              minimum: 1
              maximum: 10
              example: 8
            neuroticism:
              type: number
              description: Reflects a tendency toward emotional instability, anxiety, moodiness, irritability, and vulnerability to psychological stress.
              minimum: 1
              maximum: 10
              example: 3

    DataItem:
      type: object
      required:
        - id
        - sex
        - age
        - openness
        - conscientiousness
        - extraversion
        - agreeableness
        - neuroticism
      properties:
        id:
          type: string
          example: uC3BVPe3
          description: Agent id
        age:
          type: integer
          example: 32
        sex:
          type: string
          enum: [male, female]
          example: male
        openness:
          type: number
          description: Openness value
          minimum: 1
          maximum: 10
        conscientiousness:
          type: number
          description: Conscientiousness value
          minimum: 1
          maximum: 10
        extraversion:
          type: number
          description: Extraversion value
          minimum: 1
          maximum: 10
        agreeableness:
          type: number
          description: Agreeableness value
          minimum: 1
          maximum: 10
        neuroticism:
          type: number
          description: Neuroticism value
          minimum: 1
          maximum: 10

    Simulation:
      type: object
      required:
        - id
        - state
        - type
        - name
        - topic
        - stats
      properties:
        id:
          type: string
          description: Unique identifier for the simulation
          example: "iLVieMGDrI6GTBLq"
        state:
          type: string
          enum: [primed, running, ended, stopped]
          description: Current state of the simulation
          example: "primed"
        type:
          type: string
          enum: [discussion, conversation, survey]
          description: Type of simulation
          example: "discussion"
        name:
          type: string
          description: Name of the simulation
          example: "Climate Change Discussion"
        description:
          type: string
          description: Optional description of the simulation
          example: "A discussion about climate change policies"
        environment:
          $ref: "#/components/schemas/Environment"
        topic:
          type: string
          description: Topic for the simulation
          example: "Climate Change"
        stats:
          $ref: "#/components/schemas/SimulationStats"

    SimulationInput:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: Name of the simulation
          example: "Climate Change Discussion"
        type:
          type: string
          enum: [discussion, conversation, survey]
          description: Type of simulation
          example: "discussion"
        description:
          type: string
          description: Optional description of the simulation
          example: "A discussion about climate change policies"

    SimulationStats:
      type: object
      properties:
        agents:
          type: integer
          description: Number of agents in the simulation
          example: 5
        interactions:
          type: integer
          description: Number of interactions in the simulation
          example: 3
        tokens:
          $ref: "#/components/schemas/TokenStats"

    Environment:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: string
          description: Unique identifier for the environment
          example: "env123"
        description:
          type: string
          description: Description of the environment
          example: "A formal meeting room setting"
        objectives:
          type: array
          description: Goals for the environment
          items:
            type: string
            example: "Reach consensus on climate policy"
        constraints:
          type: array
          description: Constraints within the environment
          items:
            type: string
            example: "Budget limitations"
        values:
          type: array
          description: Values emphasized in the environment
          items:
            type: string
            example: "Sustainability"

    Interaction:
      type: object
      required:
        - id
        - type
        - simulationId
        - active
        - participants
      properties:
        id:
          type: string
          description: Unique identifier for the interaction
          example: "int123456"
        type:
          type: string
          enum: [discussion, conversation, survey]
          description: Type of interaction
          example: "conversation"
        simulationId:
          type: string
          description: ID of the simulation this interaction belongs to
          example: "iLVieMGDrI6GTBLq"
        active:
          type: boolean
          description: Whether the interaction is currently active
          example: true
        participants:
          type: array
          description: IDs of agents participating in the interaction
          items:
            type: string
            example: "uC3BVPe3"
        messages:
          type: array
          description: Messages in the interaction
          items:
            $ref: "#/components/schemas/Message"
        stats:
          $ref: "#/components/schemas/InteractionStats"

    InteractionInput:
      type: object
      required:
        - participants
        - simulationId
      properties:
        participants:
          type: array
          description: IDs of agents participating in the interaction
          items:
            type: string
            example: "uC3BVPe3"
        simulationId:
          type: string
          description: ID of the simulation this interaction belongs to
          example: "iLVieMGDrI6GTBLq"

    InteractionStats:
      type: object
      required:
        - messages
        - tokens
      properties:
        messages:
          type: integer
          description: Number of messages in the interaction
          example: 12
        tokens:
          $ref: "#/components/schemas/TokenStats"

    Message:
      type: object
      required:
        - simulationId
        - interactionId
        - interactionType
        - senderId
        - content
      properties:
        simulationId:
          type: string
          description: ID of the simulation this message belongs to
          example: "iLVieMGDrI6GTBLq"
        interactionId:
          type: string
          description: ID of the interaction this message belongs to
          example: "int123456"
        interactionType:
          type: string
          enum: [discussion, conversation, survey]
          description: Type of interaction this message belongs to
          example: "conversation"
        senderId:
          type: string
          description: ID of the agent who sent the message
          example: "uC3BVPe3"
        content:
          type: string
          description: Content of the message
          example: "I think we should consider renewable energy sources."
        stats:
          $ref: "#/components/schemas/TokenStats"
